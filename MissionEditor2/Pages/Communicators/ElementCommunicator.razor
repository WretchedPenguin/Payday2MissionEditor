@using MissionEditor2.Services
@using MissionEditor2.Domain
@using Microsoft.Extensions.Logging
@using Newtonsoft.Json.Linq
@using Vector3 = MissionEditor2.Domain.Vector3
@inject IJSRuntime JsRuntime
@inject ElementService ElementService
@implements IDisposable
@inject ILogger<ElementCommunicator> Logger

@* this class contains no html and is only used to communicate with javascript when elements are changed *@

@code {

    private static ElementCommunicator instance;
    
    protected override void OnInitialized()
    {
        instance = this;
        ElementService.OnElementCreated += OnElementCreated;
        ElementService.OnElementUpdated += OnElementUpdated;
    }

    public void Dispose()
    {
        ElementService.OnElementCreated -= OnElementCreated;
        ElementService.OnElementUpdated -= OnElementUpdated;
    }

    private async Task OnElementCreated(Element element)
    {
        element.Class = ConvertTypeToRete(element);
        var position = Vector3.FromString(element.Values["position"] as string);

        ParseLists(element);
        
        string result = await JsRuntime.InvokeAsync<string>("app.createNode", element, position);
        if (result != null)
        {
            Logger.LogInformation(result);
        }
    }

    private void ParseLists(Element element)
    {
        ParseList<ElementConnection>(element, "on_executed");
        ParseList<long>(element, "elements");
        ParseList<UnitSequenceItem>(element, "trigger_list");
        ParseList<string>(element, "preferred_spawn_groups");
    }

    private void ParseList<T>(Element element, string name)
    {
        if (element.Values.ContainsKey(name))
            element.Values[name] = ((JArray) element.Values[name]).ToObject<List<T>>();
    }

    private async Task OnElementUpdated(ElementUpdate elementUpdate)
    {
        string result = await JsRuntime.InvokeAsync<string>("app.updateNode", elementUpdate.Id, elementUpdate.Name, elementUpdate.Value);
        if (result != null)
        {
            Logger.LogInformation(result);
        }
    }

    private string ConvertTypeToRete(Element element)
    {
        string type = element.Class;
        if (element.Class == "MissionScriptElement" && element.Values.TryGetValue("execute_on_startup", out object eos))
        {
            if (eos is bool value && value)
                type = "startup";
        }
        return type;
    }

}